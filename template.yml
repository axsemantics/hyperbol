---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  apiDockerImage:
    Type: String

Resources:
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
    DeletionPolicy: Delete

  BoardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
    DeletionPolicy: Delete

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue TestVpc
      GroupDescription: hyperbol-api
      SecurityGroupIngress:
        - SourceSecurityGroupId: !ImportValue HyperbolElbSecurityGroup
          Description: allow http from loadbalancer
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: !Sub "/${AWS::StackName}/"
      Policies:
        - PolicyName: DynamoDb
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt UserTable.Arn
                  - !GetAtt BoardTable.Arn

  ApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 60

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Ref apiDockerImage
          Name: api
          Command:
            - run
            - server
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: USER_TABLE
              Value: !Ref UserTable
            - Name: BOARD_TABLE
              Value: !Ref BoardTable
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ApiLogs
              awslogs-region: !Ref AWS::Region

      Cpu: "256"
      ExecutionRoleArn: !ImportValue HyperbolApiTaskExecutionRole
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn

  Cluster:
    Type: AWS::ECS::Cluster

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      PlatformVersion: "1.3.0"
      PropagateTags: TASK_DEFINITION
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !ImportValue TestVpcSubnetPrivateA
            - !ImportValue TestVpcSubnetPrivateB
            - !ImportValue TestVpcSubnetPrivateC
      LoadBalancers:
        - ContainerName: api
          ContainerPort: 8000
          TargetGroupArn: !ImportValue HyperbolTargetGroup
